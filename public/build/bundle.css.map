{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Field.svelte",
    "Generator.svelte",
    "User.svelte"
  ],
  "sourcesContent": [
    "<script>\nimport { createEventDispatcher } from 'svelte';\nconst dispatch = createEventDispatcher();\n\nexport let fieldName = ''\n\nfunction deleteField(field){\n    dispatch(\"delete_field\", {fieldName: fieldName})\n}\n\n</script>\n\n<!-- ###################### -->\n<div class=\"field\">\n    <p>{fieldName}</p>\n    <button on:click={deleteField}>Delete</button>\n</div>\n\n<!-- ###################### -->\n\n<style>\n.field {\n    display: grid;\n    grid-template-columns: 200px 100px;\n    grid-gap: 10px;\n}\n\np{\n    font-size: 20px;\n    /* border-style: solid; */\n    background-color: azure;\n    margin: 0px;\n    padding: 3px;\n    /* border-width: 1px; */\n    /* border-color:black; */\n    /* padding: 5px; */\n}\n</style>",
    "<script>\nimport User from './User.svelte'\nimport Field from './Field.svelte'\nimport { saveAs } from 'file-saver';\nlet fields = [\"name\", \"email\"]\nlet field = 'Name'\nlet className = 'Person'\nlet button1Text = 'Download file: '+className+'.svelte'\nlet button2Text = 'Download file: '+className+'s.svelte'\n\n\nfunction addNameOfClass(){\n        console.log(\"saved class \" + className)\n        button1Text = 'Download file: '+className+'.svelte'\n        button2Text = 'Download file: '+className+'s.svelte'\n}\n\nfunction addField(){\n    fields.push(field)\n    fields = fields\n    console.log(\"added field \" + field)\n}\n\n\nfunction publishFile(content, filename){\n    var blob = new Blob([content], {type: \"text/plain;charset=utf-8\"});\n    window.saveAs(blob, filename);\n}\n\nfunction deleteField(field){\n    console.log(\"delete a field...\" + field.detail.fieldName)\n    let index = -1;\n    for(let i=0; i<fields.length;i++){\n        if(fields[i] == field.detail.fieldName){\n            console.log(\"found it !! at pos \" + i)\n            index = i\n        }\n    }\n    if(index >= 0){\n        fields.splice(index,1)\n        fields = fields\n    }\n}\n\nfunction generateCollectionFile(){\n    let classN = className.toLowerCase()\n    let src = `\n<script>\nimport {db} from './firestore.js'\nimport ${className} from './${className}.svelte'\nlet ${classN}s = []\n${getClassVariables()}\n\ndb.collection('${classN}s').onSnapshot(data => {\n    ${classN}s = data.docs\n})\n\nfunction add${className}(){\n    db.collection('${classN}s').add({${getFieldListAsString()}})\n    // Firebase will automatically map to relevant names !!\n${getFieldsToResetAfterAddition()}\n}\n<\\/script>\n\n<!-- ###################### -->\n<h2>${className}s</h2>\n<br/>\n<div class=\"${classN}\">\n    <form on:submit|preventDefault={add${className}}>\n${getInputsForAdd()}\\t\\t<button>Add</button>\n    </form>\n</div>\n\n\n<div>\n{#each ${classN}s as ${classN}}\n    <${className} id={${classN}.id} ${classN}={${classN}.data()} />\n{/each}\n</div>\n\n<!-- ###################### -->\n\n<style>\n.${classN} form {\n    display: grid;\n    ${getGridTemplateColumns()}\n    grid-gap: 10px;\n}\n</style>\n`\nconsole.log(src)\npublishFile(src, className+\"s.svelte\")\n}\n\nfunction generateEntityFile(){\n    let classN = className.toLowerCase()\n    let inputs = getInputs()\n    let src = `\n<script>\nimport {db} from './firestore.js'\nexport let id = ''\nexport let ${classN} = {}\n\nfunction delete${className}(){\n    db.collection('${classN}s').doc(id).delete()\n}\n\nfunction update${className}(){\n    db.collection('${classN}s').doc(id).update(${classN})\n}\n\n<\\/script>\n\n<div class=\"${classN}\">\n${inputs}\\t<button on:click={delete${className}}>Delete</button>\n\\t<button on:click={update${className}}>Update</button>\n</div>\n\n<!-- ###################### -->\n\n<style>\n.${classN} {\n    display: grid;\n    ${getGridTemplateColumns()}\n    grid-gap: 10px;\n}\n</style>\n`\nconsole.log(src)\npublishFile(src, className+\".svelte\")\n}\n\n\nfunction getFieldListAsString(){\n    let out = ''\n    for(let i=0; i<fields.length; i++){\n        out +=  fields[i] + ', '\n    }\n\n    return out.substring(0, out.length - 2);\n}\n\nfunction getClassVariables(){\n    let out = ''\n    for(let i=0; i<fields.length; i++){\n        out +=  'let '+ fields[i] +' = \\'\\'\\n'\n    }\n    return out\n}\n\n\nfunction getInputs(){\n    let out = ''\n    for(let i=0; i<fields.length; i++){\n        out +=  '\\t<input type=\"text\" bind:value=\"{'+className.toLowerCase()+'.'+fields[i]+'}\">\\n'\n    }\n    return out\n}\n\nfunction getInputsForAdd(){\n    let out = ''\n    for(let i=0; i<fields.length; i++){\n        out +=  '\\t\\t<input type=\"text\" placeholder=\"'+fields[i]+'\" bind:value={'+fields[i]+'}>\\n'\n    }\n    return out\n}\n\nfunction getFieldsToResetAfterAddition(){\n    let out = ''\n    for(let i=0; i<fields.length; i++){\n        out +=  '\\t'+fields[i] +' = \\'\\'\\n'\n    }\n    return out\n}\n\n\n\n\nfunction getButtons(){\n    let out = ''\n    for(let i=0; i<fields.length; i++){\n        out +=  '<input type=\"text\" bind:value=\"{'+className.toLowerCase()+'.'+fields[i]+'}\">\\n'\n    }\n    return out\n}\n\nfunction getGridTemplateColumns(){\n    let fraction = 12 / fields.length\n    let out = 'grid-template-columns: '\n    for(let i=0; i<fields.length; i++){\n        out += fraction+'fr '\n    }\n    out += '2fr 2fr;'\n    return out\n}\n\n</script>\n\n<!-- ###################### -->\n<div id=\"step0\" class=\"steps\">\n    <h2>Step 0</h2>\n    <p>If you don't have a Svelte project already, do the following:</p>\n    <ul>\n    <li>download and install <a href=\"https://nodejs.org/en/download/\">Node.js</a></li>\n    <li> download and unzip <a href=\"https://www.dropbox.com/s/wbco7n4j835x49x/svelte-app.zip?dl=1\">this starter project</a> to <i>myFolder</i></li>\n    <li> open a terminal at <i>myFolder</i> and type:\n        <ul class=\"sourcecode\">\n            <li>npm install + ENTER</li>\n            <li>npm run dev + ENTER</li>\n        </ul>\n    </li>\n    <li>now open a browser, and go to localhost:5000, and see if it works</li>\n    <li>create a <a href=\"https://firebase.google.com/docs/web/setup\">Firebase project</a> </li>\n    <li>add this <a href=\"https://www.dropbox.com/s/2afem5lbt5w020y/firestore.js?dl=1\">firestore.js</a> file to your src folder, and add your Firebase values to it.</li>\n    <li>again in terminal at <i>myFolder</i>, type:\n    <ul class=\"sourcecode\">\n        <li>npm install firebase</li>\n    </ul>\n    </li>\n    <li>for hosting your application, consider <a href=\"https://www.netlify.com/\">Netlify.com</a></li>\n    </ul>\n</div>\n<br/>\n<div class=\"steps\">\n    <h2>Step 1</h2>\n    <p>Enter a class name (e.g. User, Student, Animal): </p>\n    <div id=\"nameofclass\">\n        <form on:submit|preventDefault={addNameOfClass}>\n            <input type=\"text\" bind:value={className}>\n            <button>Save Class name</button>\n        </form>\n    </div>\n    <p>Add fields, (e.g. name, e-mail, address): </p>\n    <div id=\"addField\">\n        <form on:submit|preventDefault={addField}>\n            <input type=\"text\" bind:value={field}>\n            <button>Add field</button>\n        </form>\n    </div>\n\n    <div id=\"users\">\n    {#each fields as f}\n        <Field fieldName = {f} on:delete_field={deleteField} />\n    {/each}\n    </div>\n</div>\n<br/>\n<div class=\"steps\">\n    <h2>Step 2</h2>\n    <p>Download these 2 files, and move them into the <i>src</i> folder of your project</p>\n    <button on:click={generateEntityFile}>\n    {button1Text}\n    </button><br/>\n    <button on:click={generateCollectionFile}>\n    {button2Text}\n    </button>\n</div>\n<br/>\n<div id=\"step2\" class=\"steps\">\n    <h2>Step 3</h2>\n    <p>Add the following line between &lt;script&gt &lt/script&gt tags in your App.svelte file:</p>\n    <p class=\"sourcecode\">import {className} from './{className}.svelte'</p>\n</div>\n<br/>\n<div id=\"step3\" class=\"steps\">\n    <h2>Step 4</h2>\n    <p>Add the following line to your App.svelte file (outside the &lt;script&gt &lt/script&gt tags) :</p>\n    <p class=\"sourcecode\">&lt;{className}s/&gt</p>\n</div>\n<!-- ###################### -->\n<style>\n.sourcecode {\n    font-family: Consolas,monaco,monospace;\n}\n\n.steps {\n    padding-left: 10px;\n    border-style: solid;\n    border-width: 1px;\n     border-color:black;\n}\n\n\n</style>",
    "<script>\nimport {db} from './firestore.js'\nexport let id = ''\nexport let user = {}\n\nfunction deleteUser(){\n    db.collection('users').doc(id).delete()\n}\n\nfunction updateUser(){\n    db.collection('users').doc(id).update(user)\n}\n\n</script>\n\n<div id=\"user\">\n\t<input type=\"text\" bind:value=\"{user.email}\">\n\t<input type=\"text\" bind:value=\"{user.name}\">\n\t<button on:click={deleteUser}>Delete</button>\n\t<button on:click={updateUser}>Update</button>\n</div>\n\n<!-- ###################### -->\n\n<style>\n#user {\n    display: grid;\n    grid-template-columns: 4fr 4fr 3fr 3fr;\n    grid-gap: 10px;\n}\n</style>\n"
  ],
  "names": [],
  "mappings": "AAqBA,MAAM,cAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,KAAK,CAAC,KAAK,CAClC,QAAQ,CAAE,IAAI,AAClB,CAAC,AAED,eAAC,CAAC,AACE,SAAS,CAAE,IAAI,CAEf,gBAAgB,CAAE,KAAK,CACvB,MAAM,CAAE,GAAG,CACX,OAAO,CAAE,GAAG,AAIhB,CAAC;AC2OD,WAAW,cAAC,CAAC,AACT,WAAW,CAAE,QAAQ,CAAC,MAAM,CAAC,SAAS,AAC1C,CAAC,AAED,MAAM,cAAC,CAAC,AACJ,YAAY,CAAE,IAAI,CAClB,YAAY,CAAE,KAAK,CACnB,YAAY,CAAE,GAAG,CAChB,aAAa,KAAK,AACvB,CAAC;AC/PD,KAAK,eAAC,CAAC,AACH,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CACtC,QAAQ,CAAE,IAAI,AAClB,CAAC"
}