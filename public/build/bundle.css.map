{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Field.svelte",
    "Generator.svelte"
  ],
  "sourcesContent": [
    "<script>\nimport { createEventDispatcher } from 'svelte';\nconst dispatch = createEventDispatcher();\n\nexport let fieldName = ''\n\nfunction deleteField(field){\n    dispatch(\"delete_field\", {fieldName: fieldName})\n}\n\n</script>\n\n<!-- ###################### -->\n<div class=\"field\">\n    <p>{fieldName}</p>\n    <button on:click={deleteField}>Delete</button>\n</div>\n\n<!-- ###################### -->\n\n<style>\n.field {\n    display: grid;\n    grid-template-columns: 200px 100px;\n    grid-gap: 10px;\n}\n\np{\n    font-size: 20px;\n    /* border-style: solid; */\n    background-color: azure;\n    margin: 0px;\n    padding: 3px;\n    /* border-width: 1px; */\n    /* border-color:black; */\n    /* padding: 5px; */\n}\n</style>",
    "<script>\nimport Field from './Field.svelte'\nimport { saveAs } from 'file-saver';\nimport {generateCollectionFile} from './js/collection.js'\nimport {generateEntityFile} from './js/entity.js'\nlet fields = [\"name\", \"email\"]\nlet field = 'Name'\nlet className = 'Person'\nlet sortingCBvalue = false;\nlet searchChecked = false;\nlet searchField = ''\nlet classMessage = ''\nlet fieldMessage = ''\n\nfunction addField(){\n    if (verifyField()){\n        fields.push(field)\n        fields = fields\n        console.log(\"added field \" + field)\n        field = ''\n        fieldMessage = ''\n    }\n}\n\nfunction verifyClass(){\n    if (/\\s/.test(className)) {\n        classMessage = \"Found white space in class name\"\n    }else if(className.length == 0){\n        classMessage = \"Class name must be at least 1 character\"\n    }else{\n        classMessage = ''\n    }\n}\n\nfunction verifyField(){\n if (/\\s/.test(field)) {\n        fieldMessage = \"Found white space in field name\"\n        return false\n    }else if(field.length == 0){\n        fieldMessage = \" Field name must be at least 1 character\"\n        return false\n    }\n    fieldMessage = '' \n    return true\n}\n\nfunction deleteField(field){\n    console.log(\"delete a field...\" + field.detail.fieldName)\n    let index = -1;\n    for(let i=0; i<fields.length;i++){\n        if(fields[i] == field.detail.fieldName){\n            console.log(\"found it !! at pos \" + i)\n            index = i\n        }\n    }\n    if(index >= 0){\n        fields.splice(index,1)\n        fields = fields\n    }\n}\n\nfunction publishFile(content, filename){\n    var blob = new Blob([content], {type: \"text/plain;charset=utf-8\"});\n    window.saveAs(blob, filename);\n}\n\nfunction searchToggle(){\n     if(searchChecked){ // reset the value, if checkbox was un-checked\n         searchField = ''\n     }else if(searchField == ''){\n         searchField = fields[0]\n     }\n}\n\n\n</script>\n\n<!-- ###################### -->\n<div id=\"step0\" class=\"steps\">\n    <h2>Step 0</h2>\n    <p>If you don't have a Svelte project already, do the following:</p>\n    <ul>\n    <li>download and install <a href=\"https://nodejs.org/en/download/\">Node.js</a></li>\n    <li> download and unzip <a href=\"https://www.dropbox.com/s/wbco7n4j835x49x/svelte-app.zip?dl=1\">this starter project</a> to <i>myFolder</i></li>\n    <li> open a terminal at <i>myFolder</i> and type:\n        <ul class=\"sourcecode\">\n            <li>npm install + ENTER</li>\n            <li>npm run dev + ENTER</li>\n        </ul>\n    </li>\n    <li>now open a browser, and go to localhost:5000, and see if it works</li>\n    <li>create a <a href=\"https://firebase.google.com/docs/web/setup\">Firebase project</a> </li>\n    <li>add this <a href=\"https://www.dropbox.com/s/2afem5lbt5w020y/firestore.js?dl=1\">firestore.js</a> file to your src folder, and add your Firebase values to it.</li>\n    <li>again in terminal at <i>myFolder</i>, type:\n    <ul class=\"sourcecode\">\n        <li>npm install firebase</li>\n    </ul>\n    </li>\n    <li>for hosting your application, consider <a href=\"https://www.netlify.com/\">Netlify.com</a></li>\n    </ul>\n</div>\n<br/>\n<div class=\"steps\">\n    <h2>Step 1</h2>\n    <p>Enter a class name (e.g. User, Student, Animal): </p>\n    <div id=\"nameofclass\">\n            <input type=\"text\" bind:value={className} on:input={() => verifyClass()}>\n            <span class=\"feedback\">{classMessage}</span>\n    </div>\n    <p>Add fields, (e.g. name, e-mail, address): </p>\n    <div id=\"addField\">\n        <form on:submit|preventDefault={addField}>\n            <input type=\"text\" bind:value={field} on:input={() => verifyField()}>\n            <button>Add field</button>\n            <span class=\"feedback\">{fieldMessage}</span>\n        </form>\n    </div>\n\n    <div id=\"users\">\n    {#each fields as f}\n        <Field fieldName = {f} on:delete_field={deleteField} />\n    {/each}\n    </div>\n    <br/>\n    <div id=\"sortingDIV\">\n        <span>Add sorting to all fields:&nbsp;&nbsp;&nbsp;</span>\n        <input id=\"sortingCB\" type=\"checkbox\" bind:checked={sortingCBvalue} />\n    </div>\n    <br/>\n     <div id=\"searchDIV\">\n        <span>Add search to <strong>one</strong> field:&nbsp;&nbsp;&nbsp;</span>\n        <input id=\"searchCB\" type=\"checkbox\" bind:checked={searchChecked} on:click={searchToggle} />\n        {#if searchChecked}\n            <select id=\"selectSort\" bind:value={searchField} >\n                {#each fields as field}\n                    <option>{field}</option>\n                {/each}\n            </select>\n        {/if}\n    </div>\n    <br/>\n</div>\n<br/>\n<div class=\"steps\">\n    <h2>Step 2</h2>\n    {#if classMessage == ''}\n    <p>Download these 2 files, and move them into the <i>src</i> folder of your Svelte project</p>\n    <button on:click={() => generateEntityFile(className, fields, publishFile)}>\n    Download {className}.svelte\n    </button><br/>\n    <button on:click={() => generateCollectionFile(className, sortingCBvalue, fields, searchField, publishFile)}>\n    Download {className}s.svelte\n    </button>\n    {:else}\n    <h3>Add a legal class name to continue</h3>\n    {/if}\n</div>\n<br/>\n<div id=\"step2\" class=\"steps\">\n    <h2>Step 3</h2>\n    <p>Add the following line between &lt;script&gt &lt/script&gt tags in your App.svelte file:</p>\n    <p class=\"sourcecode\">import {className}s from './{className}s.svelte'</p>\n</div>\n<br/>\n<div id=\"step3\" class=\"steps\">\n    <h2>Step 4</h2>\n    <p>Add the following line to your App.svelte file (outside the &lt;script&gt &lt/script&gt tags) :</p>\n    <p class=\"sourcecode\">&lt;{className}s/&gt</p>\n</div>\n<!-- ###################### -->\n<style>\n.sourcecode {\n    font-family: Consolas,monaco,monospace;\n}\n\n.steps {\n    padding-left: 10px;\n    border-style: solid;\n    border-width: 1px;\n     border-color:black;\n}\n\n#sortingCB, #searchCB{\n    transform : scale(2); \n}\n#sortingDIV{\n    margin-bottom: 10px;\n    \n}\n.feedback{\n    color: red\n}\n\n\n</style>"
  ],
  "names": [],
  "mappings": "AAqBA,MAAM,cAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,KAAK,CAAC,KAAK,CAClC,QAAQ,CAAE,IAAI,AAClB,CAAC,AAED,eAAC,CAAC,AACE,SAAS,CAAE,IAAI,CAEf,gBAAgB,CAAE,KAAK,CACvB,MAAM,CAAE,GAAG,CACX,OAAO,CAAE,GAAG,AAIhB,CAAC;ACuID,WAAW,cAAC,CAAC,AACT,WAAW,CAAE,QAAQ,CAAC,MAAM,CAAC,SAAS,AAC1C,CAAC,AAED,MAAM,cAAC,CAAC,AACJ,YAAY,CAAE,IAAI,CAClB,YAAY,CAAE,KAAK,CACnB,YAAY,CAAE,GAAG,CAChB,aAAa,KAAK,AACvB,CAAC,AAED,wBAAU,CAAE,uBAAS,CAAC,AAClB,SAAS,CAAG,MAAM,CAAC,CAAC,AACxB,CAAC,AACD,yBAAW,CAAC,AACR,aAAa,CAAE,IAAI,AAEvB,CAAC,AACD,uBAAS,CAAC,AACN,KAAK,CAAE,GAAG;AACd,CAAC"
}